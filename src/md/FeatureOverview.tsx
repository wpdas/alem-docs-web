import { Markdown } from 'alem';

const FeatureOverview = () => {
   const mdContent = Buffer.from(`IyBGZWF0dXJlIE92ZXJ2aWV3CgpBbGVtIGlzIGEgd2ViMyAqKkphdmFTY3JpcHQqKiAvICoqVHlwZVNjcmlwdCoqIGxpYnJhcnkgdG8gY3JlYXRlIHdlYjMgYXBwcyBmb3IgTmVhciBCT1MuIFlvdSBjYW4gY3JlYXRlIHlvdXIgYXBwbGljYXRpb25zIGluIGEgc2ltaWxhciB3YXkgdG8gUmVhY3QuIEFsbCBjb21wb25lbnRzIGFuZCBvdGhlciByZXNvdXJjZXMgd2lsbCBiZSB0cmFuc2Zvcm1lZCBpbnRvIGEgZmlsZSB1bmRlcnN0YW5kYWJsZSBieSBOZWFyIFZNLgoKPGltZyBzcmM9J2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC93cGRhcy9hbGVtLWRvY3Mtd2ViL3NyYy9tZC9hc3NldHMvZGlhZ3JhbS5qcGcnIGhlaWdodD0nMzgwJyBhbHQ9J0RpYWdyYW0nIC8+CgojIyBDb21wb25lbnQKCllvdSBjYW4gY3JlYXRlIGFueSBjb21wb25lbnQgZmlsZSB1c2luZyAqKkphdmFTY3JpcHQqKiBvciAqKlR5cGVTY3JpcHQqKi4gVGhlIGVudHJ5cG9pbnQgbXVzdCBiZSBhbiBBcHAgY29tcG9uZW50IGxpa2Ugc286CgpgYGB0c3gKY29uc3QgQXBwID0gKCkgPT4gewogIHJldHVybiAoCiAgICA8PgogICAgICA8aDE+SGVsbG8gV29ybGQ8L2gxPgogICAgPC8+CiAgKTsKfTsKCmV4cG9ydCBkZWZhdWx0IEFwcDsKYGBgCgojIyBDb21wb25lbnQgUHJvcHMKClBhc3NpbmcgcHJvcGVydGllcyB0byBhIGNvbXBvbmVudCBpcyB2ZXJ5IHNpbXBsZS4gSnVzdCB1c2UgcmVhY3QncyBkZWZhdWx0czoKCmBgYHRzeApleHBvcnQgY29uc3QgQ29tcG9uZW50QSA9ICh7IG5hbWUgfTogeyBuYW1lOiBzdHJpbmcgfSkgPT4gewogIHJldHVybiA8cD57bmFtZX08L3A+Owp9OwoKZXhwb3J0IGNvbnN0IENvbXBvbmVudEIgPSAoKSA9PiB7CiAgcmV0dXJuIDxDb21wb25lbnRBIG5hbWU9IldlbmR6IiAvPjsKfTsKCmV4cG9ydCBjb25zdCBDb21wb25lbnRDID0gKGNvbXBvbmVudFByb3BzOiB7IG5hbWU6IHN0cmluZyB9KSA9PiB7CiAgcmV0dXJuIDxwPntjb21wb25lbnRQcm9wcy5uYW1lfTwvcD47Cn07CmBgYAoKIyBHb29kIHRvIEtub3cKCiMjIFN0YXRlZnVsICYgU3RhdGVsZXNzIENvbXBvbmVudHMKClN0YXRlZnVsIGNvbXBvbmVudHMgYXJlIGludGVycHJldGVkIGFzIFdpZGdldHMgYnkgQWzDqW0sIHdoaWxlIFN0YXRlbGVzcyBjb21wb25lbnRzIGFyZSBzZWVuIGFzIGF1eGlsaWFyeSByZXNvdXJjZXMgaW5qZWN0ZWQgaW50byB0aGUgV2lkZ2V0cyB0aGF0IGltcG9ydCB0aGVtLgoKVXNpbmcgYW55IG9mIHRoZXNlIGZlYXR1cmVzIHdpbGwgY2F1c2UgYSBjb21wb25lbnQgdG8gYmUgY29uc2lkZXJlZCBTdGF0ZWZ1bDoKCmBgYHRzCmNvbnN0IFtmb28sIHNldEZvb10gPSB1c2VTdGF0ZShiYXIpOwp1c2VFZmZlY3QoKCkgPT4ge30sIFtdKTsKdXNlTWVtbygoKSA9PiB7fSwgW10pOwpTdGF0ZS5pbml0KHt9KTsKYGBgCgpFeGFtcGxlIG9mIHN0YXRlbGVzcyBhbmQgc3RhdGVmdWwgY29tcG9uZW50czoKCmBgYHRzeAovLyBTdGF0ZWxlc3MgY29tcG9uZW50CmNvbnN0IEhlcm8gPSAoeyBsYWJlbCB9OiB7IGxhYmVsOiBzdHJpbmcgfSkgPT4gewogIHJldHVybiA8cD5IZXJvIEJhciAtIHtsYWJlbH08L3A+Owp9OwpgYGAKCmBgYHRzeAovLyBTdGF0ZWZ1bCBjb21wb25lbnQKaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gImFsZW0iOwoKY29uc3QgRm9vdGVyID0gKCkgPT4gewogIGNvbnN0IFtmb290ZXJMYWJlbF0gPSB1c2VTdGF0ZSgiVGhpcyBpcyBmb290ZXIiKTsKCiAgcmV0dXJuIDxwPntmb290ZXJMYWJlbH08L3A+Owp9OwpgYGAKCk5vdywgbGV0J3MgaW1wbGVtZW50IHRoZSBjb21wb25lbnQgdGhhdCBpcyBnb2luZyB0byBpbXBvcnQgYm90aCBjb21wb25lbnRzIGFib3ZlOgoKYGBgdHN4Ci8vIFN0YXRlZnVsIGNvbXBvbmVudAppbXBvcnQgeyBTdGF0ZSwgc3RhdGUgfSBmcm9tICJhbGVtIjsKaW1wb3J0IEhlcm8gZnJvbSAiLi9IZXJvIjsKaW1wb3J0IEZvb3RlciBmcm9tICIuL0Zvb3RlciI7Cgpjb25zdCBNeVN0YXRlZnVsQ29tcG9uZW50ID0gKCkgPT4gewogIFN0YXRlLmluaXQoeyB2ZXJzaW9uOiAxIH0pOyAvLyBBbnkgcmFuZG9tIGluZm9ybWF0aW9uCgogIHJldHVybiAoCiAgICA8PgogICAgICA8cD5WZXJzaW9uOiB7c3RhdGUudmVyc2lvbn08L3A+CiAgICAgIDxIZXJvIGxhYmVsPXtzdGF0ZS52ZXJzaW9ufSAvPgogICAgICA8Rm9vdGVyIC8+CiAgICA8Lz4KICApOwp9OwpgYGAKCiMjIFRTWCAmIEpTWAoKQSAudHN4Ly5qc3ggZmlsZSBjYW4gaGF2ZSBvbmx5IG9uZSBzdGF0ZWZ1bCBjb21wb25lbnQuIFlvdSBjYW4gY3JlYXRlIG90aGVyIGludGVybmFsIGNvbXBvbmVudHMgd2l0aGluIHRoZSBjb21wb25lbnQncyBmdW5jdGlvbi4KCuKchSAqKi0gUmlnaHQqKgoKYGBgdHN4CmltcG9ydCB7IFN0YXRlLCBzdGF0ZSB9IGZyb20gImFsZW0iOwoKY29uc3QgTXlTdGF0ZWZ1bENvbXBvbmVudCA9ICgpID0+IHsKICBTdGF0ZS5pbml0KHsgbmFtZTogIldlbmR6IiB9KTsKCiAgcmV0dXJuIDxwPm9pIHtzdGF0ZS5uYW1lfTwvcD47Cn07CgpleHBvcnQgZGVmYXVsdCBNeVN0YXRlZnVsQ29tcG9uZW50OwpgYGAKCuKdjCAqKi0gV3JvbmcqKgoKYGBgdHN4CmltcG9ydCB7IFN0YXRlLCBzdGF0ZSB9IGZyb20gImFsZW0iOwoKY29uc3QgTXlTdGF0ZWZ1bENvbXBvbmVudCA9ICgpID0+IHsKICBTdGF0ZS5pbml0KHsgbmFtZTogIldlbmR6IiB9KTsKCiAgcmV0dXJuIDxwPm9pIHtzdGF0ZS5uYW1lfTwvcD47Cn07CgpleHBvcnQgZGVmYXVsdCBNeVN0YXRlZnVsQ29tcG9uZW50OwoKLy8gU2Vjb25kIHN0YXRlZnVsIGNvbXBvbmVudCBhdCB0aGUgc2FtZSBmaWxlLiBUaGlzIGlzIGdvaW5nIHRvIGZhaWwhCmV4cG9ydCBjb25zdCBPdGhlclN0YXRlZnVsQ29tcG9uZW50ID0gKCkgPT4gewogIFN0YXRlLmluaXQoeyBhZ2U6IDIyIH0pOwoKICByZXR1cm4gPHA+QWdlOiB7c3RhdGUuYWdlfTwvcD47Cn07CmBgYAoKU3RhdGVsZXNzIGNvbXBvbmVudHMgY2FuIGhhdmUgYXMgbWFueSBjb21wb25lbnRzIGFzIHlvdSB3YW50IGluIG9uZSBmaWxlLgoK4pyFICoqLSBSaWdodCoqCgpgYGB0c3gKLy8gR3JvdXAgb2Ygc3RhdGVsZXNzIGNvbXBvbmVudHMKZXhwb3J0IGNvbnN0IENvbXBvbmVudEEgPSAoY29tcG9uZW50UHJvcHMpID0+IHsKICAvLyAuLi4KICByZXR1cm4gPHA+b2kge2NvbXBvbmVudFByb3BzLm5hbWV9PC9wPjsKfTsKCmV4cG9ydCBjb25zdCBDb21wb25lbnRCID0gKGNvbXBvbmVudFByb3BzKSA9PiB7CiAgLy8gLi4uCiAgcmV0dXJuIDxwPkhvbGEge2NvbXBvbmVudFByb3BzLm5hbWV9PC9wPjsKfTsKCmV4cG9ydCBjb25zdCBDb21wb25lbnRDID0gKGNvbXBvbmVudFByb3BzKSA9PiB7CiAgLy8gLi4uCiAgcmV0dXJuICgKICAgIDw+CiAgICAgIDxwPkhpIHtjb21wb25lbnRQcm9wcy5uYW1lfTwvcD4KICAgICAgPENvbXBvbmVudEIgLz4KICAgICAgPENvbXBvbmVudEEgLz4KICAgIDwvPgogICk7Cn07CmBgYAoKIyMgUHJlcGFyaW5nIHRoZSBSZXNvdXJjZXMKClByZWZlciB0byBjcmVhdGUgb25lIGZpbGUgcGVyIHJlc291cmNlLCBhcyBpbXBvcnRpbmcgYSByZXNvdXJjZSBmcm9tIGEgYC50cy8uanNgIGZpbGUgd2lsbCBpbmplY3QgdGhlIGVudGlyZSBjb250ZW50cyBvZiB0aGF0IGZpbGUgaW50byB0aGUgV2lkZ2V0LiBUaGUgc2FtZSBnb2VzIGZvciBzdGF0ZWxlc3MgY29tcG9uZW50cy4KCiMjIENvbW1lbnRzCgpUaGlzIG1heSBiZSBvYnZpb3VzIGJ1dCB1c2UgdGhlIGNvcnJlY3QgZm9ybSBvZiBjb21tZW50cyBkdXJpbmcgZGV2ZWxvcG1lbnQgZm9yICoqQ1NTKiogYW5kICoqc3R5bGVkLWNvbXBvbmVudHMqKi4KCmBgYGNzcwovKiBjc3MgZmlsZSAqLwoKLm15LWNsYXNzIHsKICAvKiBDb3JyZWN0ICovCiAgZGlzcGxheTogZmxleDsKICAvLyBJbmNvcnJlY3QKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KYGBgCgpgYGB0c3gKLy8gdHN4IG9yIGpzeCBmaWxlIHVzaW5nIHN0eWxlZCBjb21wb25lbnRzCmltcG9ydCBzdHlsZWQgZnJvbSAic3R5bGVkLWNvbXBvbmVudHMiOwoKZXhwb3J0IGNvbnN0IEFwcENvbnRhaW5lciA9IHN0eWxlZC5kaXZgCiAgZGlzcGxheTogZmxleDsKICAvKiBDb3JyZWN0ICovCiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAvLyBJbmNvcnJlY3QKICBmb250LWZhbWlseTogIldpeCBNYWRlZm9yIERpc3BsYXkiLCBzYW5zLXNlcmlmOwoKICBAbWVkaWEgKG1heC13aWR0aDogODAwcHgpIHsKICAgIGZsZXgtd3JhcDogd3JhcDsKICB9CmA7CmBgYAoKIyMgQXN5bmMgLyBBd2FpdAoKVGhlIHVzZSBvZiBgYXN5bmMvYXdhaXRgIGlzIHN1cHBvcnRlZCBhbmQgZXhwZXJpbWVudGFsLiBJdCBzaG91bGQgYmUgdXNlZCBvbmx5IGluIHRoZSBtYWluIHNjb3BlIG9mIHRoZSBjb21wb25lbnQuIEl0IHdpbGwgbWFrZSBjaGFuZ2VzIHRvIHRoZSBzdGF0ZSBvZiB0aGUgbWFpbiBXaWRnZXQuIERvIG5vdCB1c2UgaW4gaG9va3MuIEJlbG93IGlzIGFuIGV4YW1wbGUgb2YgdXNhZ2U6CgpgYGB0c3gKaW1wb3J0IHsgZmV0Y2gsIHVzZUVmZmVjdCB9IGZyb20gImFsZW0iOwoKY29uc3QgU29tZUNvbXBvbmVudCA9ICgpID0+IHsKICBjb25zdCBmZXRjaEl0ZW1zID0gYXN5bmMgKCkgPT4gewogICAgY29uc3QgaXRlbXMgPSBhd2FpdCBmZXRjaCgiaHR0cHM6Ly9hcGkuY29tL2l0ZW1zIik7CiAgfTsKCiAgdXNlRWZmZWN0KCgpID0+IHsKICAgIGZldGNoSXRlbXMoKTsKICB9LCBbXSk7CgogIGNvbnNvbGUubG9nKGl0ZW1zKTsKCiAgcmV0dXJuIDw+PC8+Owp9OwpgYGAKCiMjIExpbWl0YXRpb25zCgotIFRoZSB1c2Ugb2YgdGhlIGBpbXBvcnQgKiBmb28gZnJvbSAnLi9mb28nYCBzaWduYXR1cmUgaXMgbm90IHN1cHBvcnRlZC4gVGhpcyBpcyBpbnRlbnRpb25hbCwgYXMgdGhlIGlkZWEgaXMgdG8gaW1wb3J0IG9ubHkgdGhlIG5lY2Vzc2FyeSBmcmFnbWVudHMgaW50byB0aGUgV2lkZ2V0LgotIEFsw6ltIGZpeGVzIGR1cGxpY2F0ZSBpdGVtIG5hbWVzIGJlaW5nIGV4cG9ydGVkIGJ5IHRoZSBhcHBsaWNhdGlvbiBhdXRvbWF0aWNhbGx5LCBidXQgeW91IHNob3VsZCBhdm9pZCBpbXBvcnRpbmcgYSByZXNvdXJjZSB0aGF0IGhhcyB0aGUgc2FtZSBuYW1lIGFzIGFueSB2YXJpYWJsZSB3aXRoaW4geW91ciBjb21wb25lbnQuIEUuZy46CgrinIUgKiotIFJpZ2h0KioKCmBgYHRzCi8vIGFDb250cmFjdC50cwpleHBvcnQgY29uc3QgY29udHJhY3RJZCA9ICJjb250cmFjdC1pZC1hLm5lYXIiOwovLyAuLi4KYGBgCgpgYGB0cwovLyBIb21lUGFnZS50c3gKaW1wb3J0IHsgY29udHJhY3RJZCB9IGZyb20gJy4vY29udHJhY3RJZCc7Cgpjb25zdCBIb21lUGFnZSA9ICgpID0+IHsKICBjb25zdCBjb250cmFjdElkX0IgPSAiY29udHJhY3QtaWQtYi5uZWFyIgoKICByZXR1cm4gKAogICAgLy8gLi4uCiAgKQp9CgpleHBvcnQgZGVmYXVsdCBIb21lUGFnZTsKYGBgCgrinYwgKiotIFdyb25nKioKCmBgYHRzCi8vIGFDb250cmFjdC50cwpleHBvcnQgY29uc3QgY29udHJhY3RJZCA9ICJjb250cmFjdC1pZC1hLm5lYXIiOwpleHBvcnQgY29uc3QgY29udHJhY3RJZF9DID0gImNvbnRyYWN0LWlkLWMubmVhciI7Ci8vIC4uLgpgYGAKCmBgYHRzCi8vIEhvbWVQYWdlLnRzeAppbXBvcnQgeyBjb250cmFjdElkX0MgfSBmcm9tICcuL2NvbnRyYWN0SWQnOwoKY29uc3QgSG9tZVBhZ2UgPSAoKSA9PiB7CiAgLy8gRVJST1I6IHRoaXMgd2lsbCBicmVhayB0aGUgYXBwbGljYXRpb24gYmVjYXVzZSB0aGUgImNvbnRyYWN0SWQiIGZyb20gYUNvbnRyYWN0LnRzIGlzIGFsc28gZ29pbmcgdG8gYmUKICAvLyBpbmplY3RlZCB0byB0aGUgZmluYWwgZmlsZSBhZnRlciBjb21waWxhdGlvbi4KICBjb25zdCBjb250cmFjdElkID0gImNvbnRyYWN0LWlkLWIubmVhciI7CgogIHJldHVybiAoCiAgICAvLyAuLi4KICApCn0KCmV4cG9ydCBkZWZhdWx0IEhvbWVQYWdlOwpgYGAK`, "base64").toString("utf-8");
   return <Markdown text={mdContent} />
}

export default FeatureOverview;
