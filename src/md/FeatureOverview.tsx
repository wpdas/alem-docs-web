import { Markdown } from 'alem';

const FeatureOverview = () => {
   const mdContent = Buffer.from(`IyBGZWF0dXJlIE92ZXJ2aWV3CgpBbGVtIGlzIGEgd2ViMyAqKkphdmFTY3JpcHQqKiAvICoqVHlwZVNjcmlwdCoqIGxpYnJhcnkgdG8gY3JlYXRlIHdlYjMgYXBwcyBmb3IgTmVhciBCT1MuIFlvdSBjYW4gY3JlYXRlIHlvdXIgYXBwbGljYXRpb25zIGluIGEgc2ltaWxhciB3YXkgdG8gUmVhY3QuIEFsbCBjb21wb25lbnRzIGFuZCBvdGhlciByZXNvdXJjZXMgd2lsbCBiZSB0cmFuc2Zvcm1lZCBpbnRvIGEgZmlsZSB1bmRlcnN0YW5kYWJsZSBieSBOZWFyIFZNLgoKIyMgQ29tcG9uZW50CgpZb3UgY2FuIGNyZWF0ZSBhbnkgY29tcG9uZW50IGZpbGUgdXNpbmcgKipKYXZhU2NyaXB0Kiogb3IgKipUeXBlU2NyaXB0KiouIFRoZSBlbnRyeXBvaW50IG11c3QgYmUgYW4gQXBwIGNvbXBvbmVudCBsaWtlIHNvOgoKYGBgdHN4CmNvbnN0IEFwcCA9ICgpID0+IHsKICByZXR1cm4gKAogICAgPD4KICAgICAgPGgxPkhlbGxvIFdvcmxkPC9oMT4KICAgIDwvPgogICk7Cn07CgpleHBvcnQgZGVmYXVsdCBBcHA7CmBgYAoKIyMgQ29tcG9uZW50IFByb3BzCgpQYXNzaW5nIHByb3BlcnRpZXMgdG8gYSBjb21wb25lbnQgaXMgdmVyeSBzaW1wbGUuIEp1c3QgdXNlIHJlYWN0J3MgZGVmYXVsdHM6CgpgYGB0c3gKZXhwb3J0IGNvbnN0IENvbXBvbmVudEEgPSAoeyBuYW1lIH06IHsgbmFtZTogc3RyaW5nIH0pID0+IHsKICByZXR1cm4gPHA+e25hbWV9PC9wPjsKfTsKCmV4cG9ydCBjb25zdCBDb21wb25lbnRCID0gKCkgPT4gewogIHJldHVybiA8Q29tcG9uZW50QSBuYW1lPSJXZW5keiIgLz47Cn07CgpleHBvcnQgY29uc3QgQ29tcG9uZW50QyA9IChjb21wb25lbnRQcm9wczogeyBuYW1lOiBzdHJpbmcgfSkgPT4gewogIHJldHVybiA8cD57Y29tcG9uZW50UHJvcHMubmFtZX08L3A+Owp9OwpgYGAKCiMgR29vZCB0byBLbm93CgojIyBTdGF0ZWZ1bCAmIFN0YXRlbGVzcyBDb21wb25lbnRzCgpTdGF0ZWZ1bCBjb21wb25lbnRzIGFyZSBpbnRlcnByZXRlZCBhcyBXaWRnZXRzIGJ5IEFsw6ltLCB3aGlsZSBTdGF0ZWxlc3MgY29tcG9uZW50cyBhcmUgc2VlbiBhcyBhdXhpbGlhcnkgcmVzb3VyY2VzIGluamVjdGVkIGludG8gdGhlIFdpZGdldHMgdGhhdCBpbXBvcnQgdGhlbS4KClVzaW5nIGFueSBvZiB0aGVzZSBmZWF0dXJlcyB3aWxsIGNhdXNlIGEgY29tcG9uZW50IHRvIGJlIGNvbnNpZGVyZWQgU3RhdGVmdWw6CgpgYGB0cwpjb25zdCBbZm9vLCBzZXRGb29dID0gdXNlU3RhdGUoYmFyKTsKdXNlRWZmZWN0KCgpID0+IHt9LCBbXSk7CnVzZU1lbW8oKCkgPT4ge30sIFtdKTsKU3RhdGUuaW5pdCh7fSk7CmBgYAoKRXhhbXBsZSBvZiBzdGF0ZWxlc3MgYW5kIHN0YXRlZnVsIGNvbXBvbmVudHM6CgpgYGB0c3gKLy8gU3RhdGVsZXNzIGNvbXBvbmVudApjb25zdCBIZXJvID0gKHsgbGFiZWwgfTogeyBsYWJlbDogc3RyaW5nIH0pID0+IHsKICByZXR1cm4gPHA+SGVybyBCYXIgLSB7bGFiZWx9PC9wPjsKfTsKYGBgCgpgYGB0c3gKLy8gU3RhdGVmdWwgY29tcG9uZW50CmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICJhbGVtIjsKCmNvbnN0IEZvb3RlciA9ICgpID0+IHsKICBjb25zdCBbZm9vdGVyTGFiZWxdID0gdXNlU3RhdGUoIlRoaXMgaXMgZm9vdGVyIik7CgogIHJldHVybiA8cD57Zm9vdGVyTGFiZWx9PC9wPjsKfTsKYGBgCgpOb3csIGxldCdzIGltcGxlbWVudCB0aGUgY29tcG9uZW50IHRoYXQgaXMgZ29pbmcgdG8gaW1wb3J0IGJvdGggY29tcG9uZW50cyBhYm92ZToKCmBgYHRzeAovLyBTdGF0ZWZ1bCBjb21wb25lbnQKaW1wb3J0IHsgU3RhdGUsIHN0YXRlIH0gZnJvbSAiYWxlbSI7CmltcG9ydCBIZXJvIGZyb20gIi4vSGVybyI7CmltcG9ydCBGb290ZXIgZnJvbSAiLi9Gb290ZXIiOwoKY29uc3QgTXlTdGF0ZWZ1bENvbXBvbmVudCA9ICgpID0+IHsKICBTdGF0ZS5pbml0KHsgdmVyc2lvbjogMSB9KTsgLy8gQW55IHJhbmRvbSBpbmZvcm1hdGlvbgoKICByZXR1cm4gKAogICAgPD4KICAgICAgPHA+VmVyc2lvbjoge3N0YXRlLnZlcnNpb259PC9wPgogICAgICA8SGVybyBsYWJlbD17c3RhdGUudmVyc2lvbn0gLz4KICAgICAgPEZvb3RlciAvPgogICAgPC8+CiAgKTsKfTsKYGBgCgojIyBUU1ggJiBKU1gKCkEgLnRzeC8uanN4IGZpbGUgY2FuIGhhdmUgb25seSBvbmUgc3RhdGVmdWwgY29tcG9uZW50LiBZb3UgY2FuIGNyZWF0ZSBvdGhlciBpbnRlcm5hbCBjb21wb25lbnRzIHdpdGhpbiB0aGUgY29tcG9uZW50J3MgZnVuY3Rpb24uCgrinIUgKiotIFJpZ2h0KioKCmBgYHRzeAppbXBvcnQgeyBTdGF0ZSwgc3RhdGUgfSBmcm9tICJhbGVtIjsKCmNvbnN0IE15U3RhdGVmdWxDb21wb25lbnQgPSAoKSA9PiB7CiAgU3RhdGUuaW5pdCh7IG5hbWU6ICJXZW5keiIgfSk7CgogIHJldHVybiA8cD5vaSB7c3RhdGUubmFtZX08L3A+Owp9OwoKZXhwb3J0IGRlZmF1bHQgTXlTdGF0ZWZ1bENvbXBvbmVudDsKYGBgCgrinYwgKiotIFdyb25nKioKCmBgYHRzeAppbXBvcnQgeyBTdGF0ZSwgc3RhdGUgfSBmcm9tICJhbGVtIjsKCmNvbnN0IE15U3RhdGVmdWxDb21wb25lbnQgPSAoKSA9PiB7CiAgU3RhdGUuaW5pdCh7IG5hbWU6ICJXZW5keiIgfSk7CgogIHJldHVybiA8cD5vaSB7c3RhdGUubmFtZX08L3A+Owp9OwoKZXhwb3J0IGRlZmF1bHQgTXlTdGF0ZWZ1bENvbXBvbmVudDsKCi8vIFNlY29uZCBzdGF0ZWZ1bCBjb21wb25lbnQgYXQgdGhlIHNhbWUgZmlsZS4gVGhpcyBpcyBnb2luZyB0byBmYWlsIQpleHBvcnQgY29uc3QgT3RoZXJTdGF0ZWZ1bENvbXBvbmVudCA9ICgpID0+IHsKICBTdGF0ZS5pbml0KHsgYWdlOiAyMiB9KTsKCiAgcmV0dXJuIDxwPkFnZToge3N0YXRlLmFnZX08L3A+Owp9OwpgYGAKClN0YXRlbGVzcyBjb21wb25lbnRzIGNhbiBoYXZlIGFzIG1hbnkgY29tcG9uZW50cyBhcyB5b3Ugd2FudCBpbiBvbmUgZmlsZS4KCuKchSAqKi0gUmlnaHQqKgoKYGBgdHN4Ci8vIEdyb3VwIG9mIHN0YXRlbGVzcyBjb21wb25lbnRzCmV4cG9ydCBjb25zdCBDb21wb25lbnRBID0gKGNvbXBvbmVudFByb3BzKSA9PiB7CiAgLy8gLi4uCiAgcmV0dXJuIDxwPm9pIHtjb21wb25lbnRQcm9wcy5uYW1lfTwvcD47Cn07CgpleHBvcnQgY29uc3QgQ29tcG9uZW50QiA9IChjb21wb25lbnRQcm9wcykgPT4gewogIC8vIC4uLgogIHJldHVybiA8cD5Ib2xhIHtjb21wb25lbnRQcm9wcy5uYW1lfTwvcD47Cn07CgpleHBvcnQgY29uc3QgQ29tcG9uZW50QyA9IChjb21wb25lbnRQcm9wcykgPT4gewogIC8vIC4uLgogIHJldHVybiAoCiAgICA8PgogICAgICA8cD5IaSB7Y29tcG9uZW50UHJvcHMubmFtZX08L3A+CiAgICAgIDxDb21wb25lbnRCIC8+CiAgICAgIDxDb21wb25lbnRBIC8+CiAgICA8Lz4KICApOwp9OwpgYGAKCiMjIFByZXBhcmluZyB0aGUgUmVzb3VyY2VzCgpQcmVmZXIgdG8gY3JlYXRlIG9uZSBmaWxlIHBlciByZXNvdXJjZSwgYXMgaW1wb3J0aW5nIGEgcmVzb3VyY2UgZnJvbSBhIGAudHMvLmpzYCBmaWxlIHdpbGwgaW5qZWN0IHRoZSBlbnRpcmUgY29udGVudHMgb2YgdGhhdCBmaWxlIGludG8gdGhlIFdpZGdldC4gVGhlIHNhbWUgZ29lcyBmb3Igc3RhdGVsZXNzIGNvbXBvbmVudHMuCgojIyBDb21tZW50cwoKVGhpcyBtYXkgYmUgb2J2aW91cyBidXQgdXNlIHRoZSBjb3JyZWN0IGZvcm0gb2YgY29tbWVudHMgZHVyaW5nIGRldmVsb3BtZW50IGZvciAqKkNTUyoqIGFuZCAqKnN0eWxlZC1jb21wb25lbnRzKiouCgpgYGBjc3MKLyogY3NzIGZpbGUgKi8KCi5teS1jbGFzcyB7CiAgLyogQ29ycmVjdCAqLwogIGRpc3BsYXk6IGZsZXg7CiAgLy8gSW5jb3JyZWN0CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9CmBgYAoKYGBgdHN4Ci8vIHRzeCBvciBqc3ggZmlsZSB1c2luZyBzdHlsZWQgY29tcG9uZW50cwppbXBvcnQgc3R5bGVkIGZyb20gInN0eWxlZC1jb21wb25lbnRzIjsKCmV4cG9ydCBjb25zdCBBcHBDb250YWluZXIgPSBzdHlsZWQuZGl2YAogIGRpc3BsYXk6IGZsZXg7CiAgLyogQ29ycmVjdCAqLwogIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgLy8gSW5jb3JyZWN0CiAgZm9udC1mYW1pbHk6ICJXaXggTWFkZWZvciBEaXNwbGF5Iiwgc2Fucy1zZXJpZjsKCiAgQG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KSB7CiAgICBmbGV4LXdyYXA6IHdyYXA7CiAgfQpgOwpgYGAKCiMjIEFzeW5jIC8gQXdhaXQKClRoZSB1c2Ugb2YgYGFzeW5jL2F3YWl0YCBpcyBzdXBwb3J0ZWQgYW5kIGV4cGVyaW1lbnRhbC4gSXQgc2hvdWxkIGJlIHVzZWQgb25seSBpbiB0aGUgbWFpbiBzY29wZSBvZiB0aGUgY29tcG9uZW50LiBJdCB3aWxsIG1ha2UgY2hhbmdlcyB0byB0aGUgc3RhdGUgb2YgdGhlIG1haW4gV2lkZ2V0LiBEbyBub3QgdXNlIGluIGhvb2tzLiBCZWxvdyBpcyBhbiBleGFtcGxlIG9mIHVzYWdlOgoKYGBgdHN4CmltcG9ydCB7IGZldGNoLCB1c2VFZmZlY3QgfSBmcm9tICJhbGVtIjsKCmNvbnN0IFNvbWVDb21wb25lbnQgPSAoKSA9PiB7CiAgY29uc3QgZmV0Y2hJdGVtcyA9IGFzeW5jICgpID0+IHsKICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgZmV0Y2goImh0dHBzOi8vYXBpLmNvbS9pdGVtcyIpOwogIH07CgogIHVzZUVmZmVjdCgoKSA9PiB7CiAgICBmZXRjaEl0ZW1zKCk7CiAgfSwgW10pOwoKICBjb25zb2xlLmxvZyhpdGVtcyk7CgogIHJldHVybiA8PjwvPjsKfTsKYGBgCgojIyBMaW1pdGF0aW9ucwoKLSBUaGUgdXNlIG9mIHRoZSBgaW1wb3J0ICogZm9vIGZyb20gJy4vZm9vJ2Agc2lnbmF0dXJlIGlzIG5vdCBzdXBwb3J0ZWQuIFRoaXMgaXMgaW50ZW50aW9uYWwsIGFzIHRoZSBpZGVhIGlzIHRvIGltcG9ydCBvbmx5IHRoZSBuZWNlc3NhcnkgZnJhZ21lbnRzIGludG8gdGhlIFdpZGdldC4KLSBBbMOpbSBmaXhlcyBkdXBsaWNhdGUgaXRlbSBuYW1lcyBiZWluZyBleHBvcnRlZCBieSB0aGUgYXBwbGljYXRpb24gYXV0b21hdGljYWxseSwgYnV0IHlvdSBzaG91bGQgYXZvaWQgaW1wb3J0aW5nIGEgcmVzb3VyY2UgdGhhdCBoYXMgdGhlIHNhbWUgbmFtZSBhcyBhbnkgdmFyaWFibGUgd2l0aGluIHlvdXIgY29tcG9uZW50LiBFLmcuOgoK4pyFICoqLSBSaWdodCoqCgpgYGB0cwovLyBhQ29udHJhY3QudHMKZXhwb3J0IGNvbnN0IGNvbnRyYWN0SWQgPSAiY29udHJhY3QtaWQtYS5uZWFyIjsKLy8gLi4uCmBgYAoKYGBgdHMKLy8gSG9tZVBhZ2UudHN4CmltcG9ydCB7IGNvbnRyYWN0SWQgfSBmcm9tICcuL2NvbnRyYWN0SWQnOwoKY29uc3QgSG9tZVBhZ2UgPSAoKSA9PiB7CiAgY29uc3QgY29udHJhY3RJZF9CID0gImNvbnRyYWN0LWlkLWIubmVhciIKCiAgcmV0dXJuICgKICAgIC8vIC4uLgogICkKfQoKZXhwb3J0IGRlZmF1bHQgSG9tZVBhZ2U7CmBgYAoK4p2MICoqLSBXcm9uZyoqCgpgYGB0cwovLyBhQ29udHJhY3QudHMKZXhwb3J0IGNvbnN0IGNvbnRyYWN0SWQgPSAiY29udHJhY3QtaWQtYS5uZWFyIjsKZXhwb3J0IGNvbnN0IGNvbnRyYWN0SWRfQyA9ICJjb250cmFjdC1pZC1jLm5lYXIiOwovLyAuLi4KYGBgCgpgYGB0cwovLyBIb21lUGFnZS50c3gKaW1wb3J0IHsgY29udHJhY3RJZF9DIH0gZnJvbSAnLi9jb250cmFjdElkJzsKCmNvbnN0IEhvbWVQYWdlID0gKCkgPT4gewogIC8vIEVSUk9SOiB0aGlzIHdpbGwgYnJlYWsgdGhlIGFwcGxpY2F0aW9uIGJlY2F1c2UgdGhlICJjb250cmFjdElkIiBmcm9tIGFDb250cmFjdC50cyBpcyBhbHNvIGdvaW5nIHRvIGJlCiAgLy8gaW5qZWN0ZWQgdG8gdGhlIGZpbmFsIGZpbGUgYWZ0ZXIgY29tcGlsYXRpb24uCiAgY29uc3QgY29udHJhY3RJZCA9ICJjb250cmFjdC1pZC1iLm5lYXIiOwoKICByZXR1cm4gKAogICAgLy8gLi4uCiAgKQp9CgpleHBvcnQgZGVmYXVsdCBIb21lUGFnZTsKYGBgCg==`, "base64").toString("utf-8");
   return <Markdown text={mdContent} />
}

export default FeatureOverview;
