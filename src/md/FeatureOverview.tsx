import { Markdown } from 'alem';

const FeatureOverview = () => {
   const mdContent = Buffer.from(``, "base64").toString("utf-8");
   return <Markdown text={mdContent} />
}

export default FeatureOverview;
